name: release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      tag_name: ${{ steps.vars.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: vars
        run: |
          echo "tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        run: |
          chmod +x scripts/generate-release-notes.sh
          TAG=${GITHUB_REF_NAME} scripts/generate-release-notes.sh RELEASE_BODY.md
          echo "Generated RELEASE_BODY.md:"; echo "===="; sed -n '1,120p' RELEASE_BODY.md || true

      - id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: U-Download ${{ github.ref_name }}
          draft: true
          body_path: RELEASE_BODY.md

  build:
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-22.04
            args: ''
          - platform: macos-latest
            args: '--target aarch64-apple-darwin'
          - platform: macos-latest
            args: '--target x86_64-apple-darwin'
          - platform: windows-latest
            args: ''
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ contains(matrix.platform, 'macos') && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install Linux dependencies
        if: startsWith(matrix.platform, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Install frontend dependencies
        run: npm ci

      - name: Import Apple Developer Certificate (macOS only)
        if: startsWith(matrix.platform, 'macos')
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application" || true)
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "APPLE_SIGNING_IDENTITY=$CERT_ID" >> $GITHUB_ENV

      - name: Build and upload with Tauri Action (Linux/macOS)
        if: startsWith(matrix.platform, 'ubuntu') || startsWith(matrix.platform, 'macos')
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # macOS signing & notarization
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ env.APPLE_SIGNING_IDENTITY }}
        with:
          releaseId: ${{ needs.prepare.outputs.release_id }}
          args: ${{ matrix.args }}
          releaseDraft: true
          tauriScript: npm run tauri

      - name: Build (Windows)
        if: startsWith(matrix.platform, 'windows')
        shell: pwsh
        run: |
          npm ci
          npm run build:icons
          npm run tauri build

      - name: Sign Windows artifacts (NSIS installer and app exe)
        if: startsWith(matrix.platform, 'windows')
        shell: pwsh
        env:
          WINDOWS_PFX_BASE64: ${{ secrets.WINDOWS_PFX_BASE64 }}
          WINDOWS_PFX_PASSWORD: ${{ secrets.WINDOWS_PFX_PASSWORD }}
        run: |
          if (-not $env:WINDOWS_PFX_BASE64 -or -not $env:WINDOWS_PFX_PASSWORD) {
            Write-Host "Windows signing secrets not set; skipping signing."
            exit 0
          }
          [IO.File]::WriteAllBytes("win-codesign.pfx", [Convert]::FromBase64String($env:WINDOWS_PFX_BASE64))
          $timestamp = "http://timestamp.digicert.com"
          $signtool = (Get-Command signtool.exe).Source
          if (-not $signtool) { throw "signtool.exe not found" }
          $nsisDir = Join-Path $env:GITHUB_WORKSPACE 'src-tauri/target/release/bundle/nsis'
          $appExe = Join-Path $env:GITHUB_WORKSPACE 'src-tauri/target/release/u-download.exe'
          if (Test-Path $appExe) {
            & $signtool sign /f win-codesign.pfx /p $env:WINDOWS_PFX_PASSWORD /fd SHA256 /tr $timestamp /td SHA256 $appExe
          }
          if (Test-Path $nsisDir) {
            Get-ChildItem $nsisDir -Filter *.exe | ForEach-Object {
              & $signtool sign /f win-codesign.pfx /p $env:WINDOWS_PFX_PASSWORD /fd SHA256 /tr $timestamp /td SHA256 $_.FullName
            }
          }

      - name: Upload Windows artifacts to draft release
        if: startsWith(matrix.platform, 'windows')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.tag_name }}
          files: |
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/u-download.exe
